"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyAssetDeploymentHandler = void 0;
const common_1 = require("./common");
class AmplifyAssetDeploymentHandler extends common_1.ResourceHandler {
    constructor(amplify, s3, event) {
        super(event);
        this.props = parseProps(this.event.ResourceProperties);
        this.amplify = amplify;
        this.s3 = s3;
    }
    // ------
    // CREATE
    // ------
    async onCreate() {
        // eslint-disable-next-line no-console
        console.log('deploying to Amplify with options:', JSON.stringify(this.props, undefined, 2));
        // Verify no jobs are currently running.
        const jobs = await this.amplify
            .listJobs({
            appId: this.props.AppId,
            branchName: this.props.BranchName,
            maxResults: 1,
        })
            .promise();
        if (jobs.jobSummaries &&
            jobs.jobSummaries.find(summary => summary.status === 'PENDING')) {
            return Promise.reject('Amplify job already running. Aborting deployment.');
        }
        // Create a pre-signed get URL of the asset so Amplify can retrieve it.
        const assetUrl = this.s3.getSignedUrl('getObject', {
            Bucket: this.props.S3BucketName,
            Key: this.props.S3ObjectKey,
        });
        // Deploy the asset to Amplify.
        const deployment = await this.amplify
            .startDeployment({
            appId: this.props.AppId,
            branchName: this.props.BranchName,
            sourceUrl: assetUrl,
        })
            .promise();
        return {
            AmplifyJobId: deployment.jobSummary.jobId,
        };
    }
    async isCreateComplete() {
        return this.isActive(this.event.AmplifyJobId);
    }
    // ------
    // DELETE
    // ------
    async onDelete() {
        // We can't delete this resource as it's a deployment.
        return;
    }
    async isDeleteComplete() {
        // We can't delete this resource as it's a deployment.
        return {
            IsComplete: true,
        };
    }
    // ------
    // UPDATE
    // ------
    async onUpdate() {
        return this.onCreate();
    }
    async isUpdateComplete() {
        return this.isActive(this.event.AmplifyJobId);
    }
    async isActive(jobId) {
        if (!jobId) {
            throw new Error('Unable to determine Amplify job status without job id');
        }
        const job = await this.amplify
            .getJob({
            appId: this.props.AppId,
            branchName: this.props.BranchName,
            jobId: jobId,
        })
            .promise();
        if (job.job.summary.status === 'SUCCEED') {
            return {
                IsComplete: true,
                Data: {
                    JobId: jobId,
                    Status: job.job.summary.status,
                },
            };
        }
        if (job.job.summary.status === 'FAILED' || job.job.summary.status === 'CANCELLED') {
            throw new Error(`Amplify job failed with status: ${job.job.summary.status}`);
        }
        else {
            return {
                IsComplete: false,
            };
        }
    }
}
exports.AmplifyAssetDeploymentHandler = AmplifyAssetDeploymentHandler;
function parseProps(props) {
    return props;
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.listDirectory = exports.NextJsAssetsDeployment = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const os = require("os");
const path = require("path");
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment");
const constructs_1 = require("constructs");
const fs = require("fs-extra");
const micromatch = require("micromatch");
const constants_1 = require("./constants");
const NextjsBuild_1 = require("./NextjsBuild");
const NextjsS3EnvRewriter_1 = require("./NextjsS3EnvRewriter");
/**
 * Uploads NextJS-built static and public files to S3.
 *
 * Will rewrite CloudFormation references with their resolved values after uploading.
 */
class NextJsAssetsDeployment extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.bucket = props.bucket;
        this.staticTempDir = this.prepareArchiveDirectory();
        this.deployments = this.uploadS3Assets(this.staticTempDir);
        // do rewrites of unresolved CDK tokens in static files
        if (this.props.environment && !this.props.isPlaceholder) {
            const rewriter = new NextjsS3EnvRewriter_1.NextjsS3EnvRewriter(this, 'NextjsS3EnvRewriter', {
                ...props,
                s3Bucket: this.bucket,
                s3keys: this._getStaticFilesForRewrite(),
                replacementConfig: {
                    env: NextjsS3EnvRewriter_1.getS3ReplaceValues(this.props.environment, true),
                },
                debug: false,
                cloudfrontDistributionId: this.props.distribution?.distributionId,
            });
            // wait for s3 assets to be uploaded first before running
            rewriter.node.addDependency(...this.deployments);
        }
    }
    // arrange directory structure for S3 asset deployments
    // should contain _next/static and ./ for public files
    prepareArchiveDirectory() {
        const archiveDir = this.props.tempBuildDir
            ? path.resolve(path.join(this.props.tempBuildDir, 'static'))
            : fs.mkdtempSync(path.join(os.tmpdir(), 'static-'));
        fs.mkdirpSync(archiveDir);
        // theoretically we could move the files instead of copy for speed...
        // path to public folder; root static assets
        const staticDir = this.props.nextBuild.nextStaticDir;
        let publicDir = this.props.isPlaceholder
            ? path.resolve(__dirname, '../assets/PlaceholderSite')
            : this.props.nextBuild.nextPublicDir;
        if (!this.props.isPlaceholder && fs.existsSync(staticDir)) {
            // copy static files
            const staticDestinationDir = path.join(archiveDir, '_next', 'static');
            fs.mkdirpSync(staticDestinationDir);
            fs.copySync(this.props.nextBuild.nextStaticDir, staticDestinationDir, {
                recursive: true,
                dereference: true,
                preserveTimestamps: true,
            });
        }
        // copy public files to root
        if (fs.existsSync(publicDir)) {
            fs.copySync(publicDir, archiveDir, {
                recursive: true,
                dereference: true,
                preserveTimestamps: true,
            });
        }
        return archiveDir;
    }
    uploadS3Assets(archiveDir) {
        // zip up bucket contents and upload to bucket
        const archiveZipFilePath = NextjsBuild_1.createArchive({
            directory: archiveDir,
            zipFileName: 'assets.zip',
            zipOutDir: path.join(this.props.nextBuild.tempBuildDir, 'assets'),
            compressionLevel: this.props.compressionLevel,
            quiet: this.props.quiet,
        });
        if (!archiveZipFilePath)
            return [];
        const maxAge = this.props.cachePolicies?.staticMaxAgeDefault?.toSeconds() ?? constants_1.DEFAULT_STATIC_MAX_AGE;
        const staleWhileRevalidate = this.props.cachePolicies?.staticStaleWhileRevalidateDefault?.toSeconds() ?? constants_1.DEFAULT_STATIC_STALE_WHILE_REVALIDATE;
        const cacheControl = aws_s3_deployment_1.CacheControl.fromString(`public,max-age=${maxAge},stale-while-revalidate=${staleWhileRevalidate},immutable`);
        const deployment = new aws_s3_deployment_1.BucketDeployment(this, 'NextStaticAssetsS3Deployment', {
            destinationBucket: this.bucket,
            cacheControl: [cacheControl],
            sources: [aws_s3_deployment_1.Source.asset(archiveZipFilePath)],
            distribution: this.props.distribution,
            prune: this.props.prune,
        });
        return [deployment];
    }
    _getStaticFilesForRewrite() {
        const staticDir = this.staticTempDir;
        const s3keys = [];
        if (!fs.existsSync(staticDir)) {
            return [];
        }
        listDirectory(staticDir).forEach((file) => {
            const relativePath = path.relative(staticDir, file);
            // skip bogus system files
            if (relativePath.endsWith('.DS_Store'))
                return;
            // is this file a glob match?
            if (!micromatch.isMatch(relativePath, NextjsS3EnvRewriter_1.replaceTokenGlobs, { dot: true })) {
                return;
            }
            s3keys.push(relativePath);
        });
        return s3keys;
    }
}
exports.NextJsAssetsDeployment = NextJsAssetsDeployment;
_a = JSII_RTTI_SYMBOL_1;
NextJsAssetsDeployment[_a] = { fqn: "cdk-nextjs-standalone.NextJsAssetsDeployment", version: "2.0.3" };
function listDirectory(dir) {
    const fileList = [];
    const publicFiles = fs.readdirSync(dir);
    for (const filename of publicFiles) {
        const filepath = path.join(dir, filename);
        const stat = fs.statSync(filepath);
        if (stat.isDirectory()) {
            fileList.push(...listDirectory(filepath));
        }
        else {
            fileList.push(filepath);
        }
    }
    return fileList;
}
exports.listDirectory = listDirectory;
//# sourceMappingURL=data:application/json;base64,
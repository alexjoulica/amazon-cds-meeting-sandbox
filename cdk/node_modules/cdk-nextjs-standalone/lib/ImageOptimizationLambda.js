"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageOptimizationLambda = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const constants_1 = require("./constants");
/**
 * This lambda handles image optimization.
 */
class ImageOptimizationLambda extends aws_lambda_nodejs_1.NodejsFunction {
    constructor(scope, id, props) {
        const { lambdaOptions, bucket, isPlaceholder } = props;
        const lambdaPath = path.resolve(__dirname, '../assets/lambda/ImageOptimization');
        const imageOptHandlerPath = path.resolve(lambdaPath, 'index.ts');
        /**
         * NOTE: This needs to be configured before calling super(), otherwise the build
         * will fail about missing modules.
         * Creates a symlink from the user's nextjs node_modules/next =>
         * assets/lambda/node_modules/next.
         * When NextjsFunction executes, it will use esbuild to bundle the required modules
         * in `imageOptimization.ts` to minimize the function size.
         */
        const source = path.join(props.nextBuild.nextDir, 'node_modules/next');
        const modulesPath = path.join(lambdaPath, 'node_modules');
        const target = path.join(modulesPath, 'next');
        if (!fs.existsSync(modulesPath))
            fs.mkdirSync(modulesPath);
        if (!fs.existsSync(target))
            fs.symlinkSync(source, target, 'dir');
        super(scope, id, {
            entry: isPlaceholder
                ? path.join(__dirname, '../assets/lambda/ImageOptimization/placeholder.ts')
                : imageOptHandlerPath,
            runtime: constants_1.LAMBDA_RUNTIME,
            bundling: isPlaceholder
                ? undefined
                : {
                    commandHooks: {
                        beforeBundling(_, outputDir) {
                            // Saves the required-server-files.json to the .next folder
                            const filePath = path.join(props.nextBuild.nextStandaloneBuildDir, 'required-server-files.json');
                            return [`mkdir -p "${outputDir}/.next"`, `cp "${filePath}" "${outputDir}/.next"`];
                        },
                        afterBundling() {
                            return [];
                        },
                        beforeInstall() {
                            return [];
                        },
                    },
                    minify: true,
                    target: 'node16',
                    externalModules: [],
                },
            layers: [props.nextLayer],
            ...lambdaOptions,
            // defaults
            memorySize: lambdaOptions?.memorySize || 1024,
            timeout: lambdaOptions?.timeout ?? aws_cdk_lib_1.Duration.seconds(10),
            environment: {
                S3_SOURCE_BUCKET: bucket.bucketName,
            },
        });
        this.bucket = bucket;
        this.addPolicy();
        fs.rmSync(modulesPath, { recursive: true, force: true });
    }
    /**
     * Adds policy statement to give GetObject permission Image Optimization lambda.
     */
    addPolicy() {
        const policyStatement = new aws_iam_1.PolicyStatement({
            actions: ['s3:GetObject'],
            resources: [this.bucket.arnForObjects('*')],
        });
        this.role?.attachInlinePolicy(new aws_iam_1.Policy(this, 'get-image-policy', {
            statements: [policyStatement],
        }));
    }
}
exports.ImageOptimizationLambda = ImageOptimizationLambda;
_a = JSII_RTTI_SYMBOL_1;
ImageOptimizationLambda[_a] = { fqn: "cdk-nextjs-standalone.ImageOptimizationLambda", version: "2.0.3" };
//# sourceMappingURL=data:application/json;base64,
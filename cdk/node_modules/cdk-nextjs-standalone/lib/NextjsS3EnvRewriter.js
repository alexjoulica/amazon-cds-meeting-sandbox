"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getS3ReplaceValues = exports.NextjsS3EnvRewriter = exports.replaceTokenGlobs = void 0;
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const cr = require("aws-cdk-lib/custom-resources");
const constructs_1 = require("constructs");
const BundleFunction_1 = require("./BundleFunction");
const constants_1 = require("./constants");
const NextjsBuild_1 = require("./NextjsBuild");
// files to rewrite CloudFormation tokens in environment variables
exports.replaceTokenGlobs = ['**/*.html', '**/*.js', '**/*.cjs', '**/*.mjs', '**/*.json'];
/**
 * Rewrites variables in S3 objects after a deployment happens to
 * replace CloudFormation tokens with their values.
 * These values are not resolved at build time because they are
 * only known at deploy time.
 */
class NextjsS3EnvRewriter extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { s3Bucket, s3keys, replacementConfig, nextBuild, debug, cloudfrontDistributionId } = props;
        if (s3keys.length === 0)
            return;
        const app = aws_cdk_lib_1.App.of(this);
        // create a custom resource to find and replace tokenized strings in static files
        // must happen after deployment when tokens can be resolved
        // compile function
        const inputPath = path.resolve(__dirname, '../assets/lambda/S3EnvRewriter.ts');
        const outputPath = path.join(nextBuild.tempBuildDir, 'deployment-scripts', 'S3EnvRewriter.cjs');
        const handlerDir = BundleFunction_1.bundleFunction({
            inputPath,
            outputPath,
            bundleOptions: {
                bundle: true,
                sourcemap: true,
                external: ['aws-sdk'],
                target: 'node16',
                platform: 'node',
                format: 'cjs',
            },
        });
        // rewriter lambda function
        const rewriteFn = new lambda.Function(this, 'RewriteOnEventHandler', {
            runtime: constants_1.LAMBDA_RUNTIME,
            memorySize: 1024,
            timeout: aws_cdk_lib_1.Duration.minutes(5),
            handler: 'S3EnvRewriter.handler',
            code: lambda.Code.fromAsset(handlerDir),
            initialPolicy: [
                new iam.PolicyStatement({
                    actions: ['s3:GetObject', 's3:PutObject'],
                    resources: [s3Bucket.arnForObjects('*')],
                }),
                ...(cloudfrontDistributionId
                    ? [
                        new iam.PolicyStatement({
                            actions: ['cloudfront:CreateInvalidation'],
                            resources: [`arn:aws:cloudfront::${app.account}:distribution/${cloudfrontDistributionId}`],
                        }),
                    ]
                    : []),
            ],
        });
        // grant permission to read env var config if provided
        if (replacementConfig.jsonS3Bucket && replacementConfig.jsonS3Key) {
            const bucket = typeof replacementConfig.jsonS3Bucket === 'string'
                ? aws_s3_1.Bucket.fromBucketName(this, 'EnvConfigBucket', replacementConfig.jsonS3Bucket)
                : replacementConfig.jsonS3Bucket;
            rewriteFn.addToRolePolicy(new iam.PolicyStatement({
                actions: ['s3:GetObject'],
                resources: [bucket.arnForObjects(replacementConfig.jsonS3Key)],
            }));
        }
        // custom resource to run the rewriter after files are copied and we can resolve token values
        const provider = new cr.Provider(this, 'RewriteStaticProvider', {
            onEventHandler: rewriteFn,
        });
        // params for the rewriter function
        const properties = {
            bucket: s3Bucket.bucketName,
            s3keys,
            replacementConfig: {
                ...replacementConfig,
                jsonS3Bucket: replacementConfig.jsonS3Bucket?.bucketName,
            },
            debug,
            cloudfrontDistributionId,
        };
        new aws_cdk_lib_1.CustomResource(this, 'RewriteStatic', {
            serviceToken: provider.serviceToken,
            properties,
        });
    }
}
exports.NextjsS3EnvRewriter = NextjsS3EnvRewriter;
// inline env vars for client and server code
// these are values to replace in built code after it's deployed to S3/lambda
function getS3ReplaceValues(environment, publicOnly) {
    const replacements = {};
    Object.entries(environment || {})
        .filter(([, value]) => aws_cdk_lib_1.Token.isUnresolved(value))
        .filter(([key]) => !publicOnly || key.startsWith('NEXT_PUBLIC_')) // don't replace server-only env vars
        .forEach(([key, value]) => {
        const token = NextjsBuild_1.makeTokenPlaceholder(key);
        replacements[token] = value.toString();
    });
    return replacements;
}
exports.getS3ReplaceValues = getS3ReplaceValues;
//# sourceMappingURL=data:application/json;base64,
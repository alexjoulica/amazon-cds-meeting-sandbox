"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NextJsLambda = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const os = require("os");
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const s3Assets = require("aws-cdk-lib/aws-s3-assets");
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const constructs_1 = require("constructs");
const fs = require("fs-extra");
const BundleFunction_1 = require("./BundleFunction");
const constants_1 = require("./constants");
const Nextjs_1 = require("./Nextjs");
const NextjsBuild_1 = require("./NextjsBuild");
const NextjsS3EnvRewriter_1 = require("./NextjsS3EnvRewriter");
function getEnvironment(props) {
    const environmentVariables = {
        ...props.environment,
        ...props.lambda?.environment,
        ...(props.nodeEnv ? { NODE_ENV: props.nodeEnv } : {}),
    };
    return environmentVariables;
}
/**
 * Build a lambda function from a NextJS application to handle server-side rendering, API routes, and image optimization.
 */
class NextJsLambda extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const { nextBuild, lambda: functionOptions, isPlaceholder } = props;
        // bundle server handler
        // delete default nextjs handler if it exists
        const defaultServerPath = path.join(nextBuild.nextStandaloneDir, 'server.js');
        if (fs.existsSync(defaultServerPath)) {
            fs.unlinkSync(defaultServerPath);
        }
        // build our server handler in build.nextStandaloneDir
        const serverHandler = path.resolve(__dirname, '../assets/lambda/NextJsHandler.ts');
        // server should live in the same dir as the nextjs app to access deps properly
        const serverPath = path.join(nextBuild.nextStandaloneDir, 'server.js');
        BundleFunction_1.bundleFunction({
            inputPath: serverHandler,
            outputPath: serverPath,
            bundleOptions: {
                bundle: true,
                minify: false,
                sourcemap: true,
                target: 'node16',
                platform: 'node',
                external: ['next', 'aws-sdk'],
                format: 'cjs',
            },
        });
        // zip up the standalone directory
        const zipOutDir = path.resolve(props.tempBuildDir
            ? path.resolve(path.join(props.tempBuildDir, `standalone`))
            : fs.mkdtempSync(path.join(os.tmpdir(), 'standalone-')));
        const zipFilePath = NextjsBuild_1.createArchive({
            directory: nextBuild.standaloneDir,
            zipFileName: 'standalone.zip',
            zipOutDir,
            fileGlob: '*',
            quiet: props.quiet,
        });
        if (!zipFilePath)
            throw new Error('Failed to create archive for lambda function code');
        // upload the lambda package to S3
        const s3asset = new s3Assets.Asset(scope, 'MainFnAsset', { path: zipFilePath });
        const code = isPlaceholder
            ? lambda.Code.fromInline("module.exports.handler = async () => { return { statusCode: 200, body: 'SST placeholder site' } }")
            : lambda.Code.fromBucket(s3asset.bucket, s3asset.s3ObjectKey);
        // build the lambda function
        const environment = getEnvironment(props);
        const fn = new aws_lambda_1.Function(scope, 'ServerHandler', {
            memorySize: functionOptions?.memorySize || 1024,
            timeout: functionOptions?.timeout ?? aws_cdk_lib_1.Duration.seconds(10),
            runtime: constants_1.LAMBDA_RUNTIME,
            handler: path.join(nextBuild.nextDirRelative, 'server.handler'),
            code,
            environment,
            ...functionOptions,
        });
        this.lambdaFunction = fn;
        // rewrite env var placeholders in server code
        const replacementParams = this._getReplacementParams(environment);
        if (!isPlaceholder && Object.keys(replacementParams).length) {
            // put JSON file with env var replacements in S3
            const [configBucket, configDeployment] = this.createConfigBucket(replacementParams);
            this.configBucket = configBucket;
            // replace env var placeholders in the lambda package with resolved values
            const rewriter = new NextjsS3EnvRewriter_1.NextjsS3EnvRewriter(this, 'LambdaCodeRewriter', {
                ...props,
                s3Bucket: s3asset.bucket,
                s3keys: [s3asset.s3ObjectKey],
                replacementConfig: {
                    // use json file in S3 for replacement values
                    // this can contain backend secrets so better to not have them in custom resource logs
                    jsonS3Bucket: configDeployment.deployedBucket,
                    jsonS3Key: Nextjs_1.CONFIG_ENV_JSON_PATH,
                },
                debug: true,
            });
            rewriter.node.addDependency(s3asset);
            // in order to create this dependency, the lambda function needs to be a child of the current construct
            // meaning we can't inherit from Function
            fn.node.addDependency(rewriter); // don't deploy lambda until rewriter is done - we are sort of 'intercepting' the deployment package
        }
    }
    _getReplacementParams(env) {
        const replacements = NextjsS3EnvRewriter_1.getS3ReplaceValues(env, false); // get placeholder => replacement values
        const replacementParams = {}; // JSON file with replacements to be uploaded to S3
        Object.entries(replacements).forEach(([key, value]) => {
            // is it a token?
            if (typeof value === 'undefined')
                return;
            if (!value || !aws_cdk_lib_1.Token.isUnresolved(value)) {
                replacementParams[key] = value;
                return;
            }
            // create param
            const param = new aws_ssm_1.StringParameter(this, `Config('${key}')`, {
                stringValue: value,
            });
            // add to env JSON
            replacementParams[key] = param.stringValue;
        });
        return replacementParams;
    }
    // this can hold our resolved environment vars for the server
    createConfigBucket(replacementParams) {
        // won't work until this is fixed: https://github.com/aws/aws-cdk/issues/19257
        const bucket = new aws_s3_1.Bucket(this, 'NextjsConfigBucket', {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
        });
        // upload environment config to s3
        const deployment = new aws_s3_deployment_1.BucketDeployment(this, 'EnvJsonDeployment', {
            sources: [
                // serialize as JSON to S3 object
                aws_s3_deployment_1.Source.jsonData(Nextjs_1.CONFIG_ENV_JSON_PATH, replacementParams),
            ],
            destinationBucket: bucket,
        });
        return [bucket, deployment];
    }
}
exports.NextJsLambda = NextJsLambda;
_a = JSII_RTTI_SYMBOL_1;
NextJsLambda[_a] = { fqn: "cdk-nextjs-standalone.NextJsLambda", version: "2.0.3" };
//# sourceMappingURL=data:application/json;base64,
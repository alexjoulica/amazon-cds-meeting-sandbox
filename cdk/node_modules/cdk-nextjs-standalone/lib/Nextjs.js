"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nextjs = exports.CONFIG_ENV_JSON_PATH = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const os = require("os");
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const s3 = require("aws-cdk-lib/aws-s3");
const constructs_1 = require("constructs");
const fs = require("fs-extra");
const ImageOptimizationLambda_1 = require("./ImageOptimizationLambda");
const NextjsAssetsDeployment_1 = require("./NextjsAssetsDeployment");
const NextjsBuild_1 = require("./NextjsBuild");
const NextjsDistribution_1 = require("./NextjsDistribution");
const NextjsLambda_1 = require("./NextjsLambda");
const NextjsLayer_1 = require("./NextjsLayer");
// contains server-side resolved environment vars in config bucket
exports.CONFIG_ENV_JSON_PATH = 'next-env.json';
/**
 * The `Nextjs` construct is a higher level construct that makes it easy to create a NextJS app.
 *
 * Your standalone server application will be bundled using o(utput tracing and will be deployed to a Lambda function.
 * Static assets will be deployed to an S3 bucket and served via CloudFront.
 * You must use Next.js 10.3.0 or newer.
 *
 * Please provide a `nextjsPath` to the Next.js app inside your project.
 *
 * @example
 * new Nextjs(this, "Web", {
 *   nextjsPath: path.resolve("packages/web"),
 * })
 */
class Nextjs extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        if (!props.quiet)
            console.debug('┌ Building Next.js app ▼ ...');
        // get dir to store temp build files in
        const tempBuildDir = props.tempBuildDir
            ? path.resolve(path.join(props.tempBuildDir, `nextjs-cdk-build-${this.node.id}-${this.node.addr.substring(0, 4)}`))
            : fs.mkdtempSync(path.join(os.tmpdir(), 'nextjs-cdk-build-'));
        this.tempBuildDir = tempBuildDir;
        // create static asset bucket
        this.staticAssetBucket =
            props.defaults?.assetDeployment?.bucket ??
                new s3.Bucket(this, 'Bucket', {
                    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                    autoDeleteObjects: true,
                });
        // layer
        const nextLayer = new NextjsLayer_1.NextjsLayer(scope, 'NextjsLayer', {});
        // build nextjs app
        this.nextBuild = new NextjsBuild_1.NextjsBuild(this, id, { ...props, tempBuildDir });
        this.serverFunction = new NextjsLambda_1.NextJsLambda(this, 'Fn', {
            ...props,
            tempBuildDir,
            nextBuild: this.nextBuild,
            lambda: props.defaults?.lambda,
        });
        // build image optimization
        this.imageOptimizationFunction = new ImageOptimizationLambda_1.ImageOptimizationLambda(this, 'ImgOptFn', {
            ...props,
            nextLayer,
            nextBuild: this.nextBuild,
            bucket: props.imageOptimizationBucket || this.bucket,
            lambdaOptions: props.defaults?.lambda,
        });
        // deploy nextjs static assets to s3
        this.assetsDeployment = new NextjsAssetsDeployment_1.NextJsAssetsDeployment(this, 'AssetDeployment', {
            ...props,
            ...props.defaults?.assetDeployment,
            tempBuildDir,
            nextBuild: this.nextBuild,
            bucket: this.staticAssetBucket,
        });
        // finish static deployment BEFORE deploying new function code
        // as there is some time after the new static files are uploaded but before they are rewritten
        this.assetsDeployment.node.addDependency(this.serverFunction);
        this.distribution = new NextjsDistribution_1.NextjsDistribution(this, 'Distribution', {
            ...props,
            ...props.defaults?.distribution,
            staticAssetsBucket: this.assetsDeployment.bucket,
            tempBuildDir,
            nextBuild: this.nextBuild,
            serverFunction: this.serverFunction.lambdaFunction,
            imageOptFunction: this.imageOptimizationFunction,
        });
        if (!props.quiet)
            console.debug('└ Finished preparing NextJS app for deployment');
    }
    get url() {
        return this.distribution.url;
    }
    get bucket() {
        return this.staticAssetBucket;
    }
}
exports.Nextjs = Nextjs;
_a = JSII_RTTI_SYMBOL_1;
Nextjs[_a] = { fqn: "cdk-nextjs-standalone.Nextjs", version: "2.0.3" };
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTokenPlaceholder = exports.TOKEN_PLACEHOLDER_END = exports.TOKEN_PLACEHOLDER_BEGIN = exports.getBuildCmdEnvironment = exports.createArchive = exports.NextjsBuild = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const os = require("os");
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const spawn = require("cross-spawn");
const fs = require("fs-extra");
const NextjsAssetsDeployment_1 = require("./NextjsAssetsDeployment");
const NEXTJS_BUILD_DIR = '.next';
const NEXTJS_STATIC_DIR = 'static';
const NEXTJS_PUBLIC_DIR = 'public';
const NEXTJS_BUILD_STANDALONE_DIR = 'standalone';
const NEXTJS_BUILD_STANDALONE_ENV = 'NEXT_PRIVATE_STANDALONE';
const NEXTJS_BUILD_OUTPUTTRACEROOT_ENV = 'NEXT_PRIVATE_OUTPUT_TRACE_ROOT';
/**
 * Represents a built NextJS application.
 * This construct runs `npm build` in standalone output mode inside your `nextjsPath`.
 * This construct can be used by higher level constructs or used directly.
 */
class NextjsBuild extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // save config
        this.tempBuildDir = props.tempBuildDir
            ? path.resolve(props.tempBuildDir)
            : fs.mkdtempSync(path.join(os.tmpdir(), 'nextjs-cdk-build-'));
        this.props = props;
        // validate paths
        const baseOutputDir = path.resolve(this.props.nextjsPath);
        if (!fs.existsSync(baseOutputDir))
            throw new Error(`NextJS application not found at "${baseOutputDir}"`);
        // root of project
        this.projectRoot = props.projectRoot ? path.resolve(props.projectRoot) : path.resolve();
        // build app
        this.runNpmBuild();
        // check for output
        const serverBuildDir = path.join(baseOutputDir, NEXTJS_BUILD_DIR);
        if (!props.isPlaceholder && !fs.existsSync(serverBuildDir))
            throw new Error(`No server build output found at "${serverBuildDir}"`);
        // our outputs
        this.standaloneDir = this._getStandaloneDir();
        this.nextStandaloneDir = this._getNextStandaloneDir();
        this.nextStandaloneBuildDir = this._getNextStandaloneBuildDir();
        this.nextDirRelative = this._getNextDirRelative();
        this.nextPublicDir = this._getNextPublicDir();
        this.nextStaticDir = this._getNextStaticDir();
        this.buildPath = this.nextStandaloneBuildDir;
        this.nextDir = this._getNextDir();
    }
    runNpmBuild() {
        const { nextjsPath, isPlaceholder, quiet } = this.props;
        if (isPlaceholder) {
            if (!quiet)
                console.debug(`Skipping build for placeholder NextjsBuild at ${nextjsPath}`);
            return;
        }
        // validate site path exists
        if (!fs.existsSync(nextjsPath)) {
            throw new Error(`Invalid nextjsPath ${nextjsPath} - directory does not exist at "${path.resolve(nextjsPath)}"`);
        }
        // Ensure that the site has a build script defined
        if (!fs.existsSync(path.join(nextjsPath, 'package.json'))) {
            throw new Error(`No package.json found at "${nextjsPath}".`);
        }
        const packageJson = fs.readJsonSync(path.join(nextjsPath, 'package.json'));
        if (!packageJson.scripts || !packageJson.scripts.build) {
            throw new Error(`No "build" script found within package.json in "${nextjsPath}".`);
        }
        // build environment vars
        const outputTracingRoot = this.projectRoot;
        const buildEnv = {
            ...process.env,
            [NEXTJS_BUILD_STANDALONE_ENV]: 'true',
            [NEXTJS_BUILD_OUTPUTTRACEROOT_ENV]: outputTracingRoot,
            ...getBuildCmdEnvironment(this.props.environment),
            ...(this.props.nodeEnv ? { NODE_ENV: this.props.nodeEnv } : {}),
        };
        const buildPath = this.props.buildPath ?? nextjsPath;
        // run build
        console.debug('â”œ Running "npm build" in', buildPath);
        const buildResult = spawn.sync('npm', ['run', 'build'], {
            cwd: buildPath,
            stdio: this.props.quiet ? 'ignore' : 'inherit',
            env: buildEnv,
        });
        if (buildResult.status !== 0) {
            throw new Error('The app "build" script failed.');
        }
    }
    // getNextBuildId() {
    //   return fs.readFileSync(path.join(this._getNextStandaloneBuildDir(), 'BUILD_ID'), 'utf-8');
    // }
    readPublicFileList() {
        const publicDir = this._getNextPublicDir();
        if (!fs.existsSync(publicDir))
            return [];
        return NextjsAssetsDeployment_1.listDirectory(publicDir).map((file) => path.join('/', path.relative(publicDir, file)));
    }
    // get the absolute path to the directory containing the nextjs project
    // it may be the project root or a subdirectory in a monorepo setup
    _getNextDir() {
        const { nextjsPath } = this.props; // path to nextjs dir inside project
        const absolutePath = path.resolve(nextjsPath); // e.g. /home/me/myapp/web
        if (!fs.existsSync(absolutePath)) {
            throw new Error(`Could not find ${absolutePath} directory.`);
        }
        return absolutePath;
    }
    // get relative path from root of the project to the nextjs project
    // e.g. 'web' or 'packages/web'
    _getNextDirRelative() {
        const absNextDir = this._getNextDir();
        const absProjectDir = this.projectRoot;
        return path.relative(absProjectDir, absNextDir);
    }
    // .next
    _getNextBuildDir() {
        return path.join(this._getNextDir(), NEXTJS_BUILD_DIR);
    }
    // output of nextjs standalone build
    _getStandaloneDir() {
        const nextDir = this._getNextBuildDir();
        const standaloneDir = path.join(nextDir, NEXTJS_BUILD_STANDALONE_DIR);
        if (!fs.existsSync(standaloneDir) && !this.props.isPlaceholder) {
            throw new Error(`Could not find ${standaloneDir} directory.`);
        }
        return standaloneDir;
    }
    // .next/ directory inside of standalone build output directory
    // contains manifests and server code
    _getNextStandaloneBuildDir() {
        return path.join(this._getNextStandaloneDir(), NEXTJS_BUILD_DIR); // e.g. /home/me/myapp/web/.next/standalone/web/.next
    }
    // nextjs project inside of standalone build
    // contains manifests and server code
    _getNextStandaloneDir() {
        const standaloneDir = this._getStandaloneDir();
        // if the project is at /home/me/myapp and the nextjs project is at /home/me/myapp/web
        // the standalone build of the web app will be at /home/me/myapp/web/.next/standalone/web
        // so we need to get the relative path from the standalone dir to the nextjsPath
        const relativePath = this._getNextDirRelative(); // e.g. 'web
        const standaloneProjectDir = path.join(standaloneDir, relativePath); // e.g. /home/me/myapp/web/.next/standalone/web
        return standaloneProjectDir;
    }
    // contains static files
    _getNextStaticDir() {
        return path.join(this._getNextBuildDir(), NEXTJS_STATIC_DIR);
    }
    _getNextPublicDir() {
        return path.join(this._getNextDir(), NEXTJS_PUBLIC_DIR);
    }
}
exports.NextjsBuild = NextjsBuild;
_a = JSII_RTTI_SYMBOL_1;
NextjsBuild[_a] = { fqn: "cdk-nextjs-standalone.NextjsBuild", version: "2.0.3" };
// zip up a directory and return path to zip file
function createArchive({ directory, zipFileName, zipOutDir, fileGlob = '*', compressionLevel = 1, quiet, }) {
    // if directory is empty, can skip
    if (!fs.existsSync(directory) || fs.readdirSync(directory).length === 0)
        return null;
    zipOutDir = path.resolve(zipOutDir);
    fs.mkdirpSync(zipOutDir);
    // get output path
    const zipFilePath = path.join(zipOutDir, zipFileName);
    // delete existing zip file
    if (fs.existsSync(zipFilePath)) {
        fs.unlinkSync(zipFilePath);
    }
    // run script to create zipfile, preserving symlinks for node_modules (e.g. pnpm structure)
    const result = spawn.sync('bash', // getting ENOENT when specifying 'node' here for some reason
    [
        quiet ? '-c' : '-xc',
        [`cd '${directory}'`, `zip -ryq${compressionLevel} '${zipFilePath}' ${fileGlob}`].join('&&'),
    ], { stdio: 'inherit' });
    if (result.status !== 0) {
        throw new Error(`There was a problem generating the package for ${zipFileName} with ${directory}: ${result.error}`);
    }
    // check output
    if (!fs.existsSync(zipFilePath)) {
        throw new Error(`There was a problem generating the archive for ${directory}; the archive is missing in ${zipFilePath}.`);
    }
    return zipFilePath;
}
exports.createArchive = createArchive;
function getBuildCmdEnvironment(siteEnvironment) {
    // Generate environment placeholders to be replaced
    // ie. environment => { API_URL: api.url }
    //     environment => API_URL="{NEXT{! API_URL !}}"
    //
    const buildCmdEnvironment = {};
    Object.entries(siteEnvironment || {}).forEach(([key, value]) => {
        buildCmdEnvironment[key] = aws_cdk_lib_1.Token.isUnresolved(value) ? exports.makeTokenPlaceholder(key) : value;
    });
    return buildCmdEnvironment;
}
exports.getBuildCmdEnvironment = getBuildCmdEnvironment;
exports.TOKEN_PLACEHOLDER_BEGIN = '{NEXT{! ';
exports.TOKEN_PLACEHOLDER_END = ' !}}';
exports.makeTokenPlaceholder = (value) => exports.TOKEN_PLACEHOLDER_BEGIN + value.toString() + exports.TOKEN_PLACEHOLDER_END;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmV4dGpzQnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvTmV4dGpzQnVpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDZDQUFvQztBQUNwQywyQ0FBdUM7QUFDdkMscUNBQXFDO0FBQ3JDLCtCQUErQjtBQUMvQixxRUFBeUQ7QUFHekQsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUM7QUFDakMsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUM7QUFDbkMsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUM7QUFDbkMsTUFBTSwyQkFBMkIsR0FBRyxZQUFZLENBQUM7QUFDakQsTUFBTSwyQkFBMkIsR0FBRyx5QkFBeUIsQ0FBQztBQUM5RCxNQUFNLGdDQUFnQyxHQUFHLGdDQUFnQyxDQUFDO0FBSTFFOzs7O0dBSUc7QUFDSCxNQUFhLFdBQVksU0FBUSxzQkFBUztJQTZDeEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF1QjtRQUMvRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLGNBQWM7UUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZO1lBQ3BDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7WUFDbEMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLGlCQUFpQjtRQUNqQixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMs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SUFFRCxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBekNELHNDQXlDQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLGVBQTJDO0lBQ2hGLG1EQUFtRDtJQUNuRCwwQ0FBMEM7SUFDMUMsbURBQW1EO0lBQ25ELEVBQUU7SUFDRixNQUFNLG1CQUFtQixHQUEyQixFQUFFLENBQUM7SUFDdkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUM3RCxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxtQkFBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsNEJBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMzRixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sbUJBQW1CLENBQUM7QUFDN0IsQ0FBQztBQVhELHdEQVdDO0FBRVksUUFBQSx1QkFBdUIsR0FBRyxVQUFVLENBQUM7QUFDckMsUUFBQSxxQkFBcUIsR0FBRyxNQUFNLENBQUM7QUFDL0IsUUFBQSxvQkFBb0IsR0FBRyxDQUFDLEtBQWEsRUFBVSxFQUFFLENBQzVELCtCQUF1QixHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyw2QkFBcUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgc3Bhd24gZnJvbSAnY3Jvc3Mtc3Bhd24nO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgbGlzdERpcmVjdG9yeSB9IGZyb20gJy4vTmV4dGpzQXNzZXRzRGVwbG95bWVudCc7XG5pbXBvcnQgeyBDb21wcmVzc2lvbkxldmVsLCBOZXh0anNCYXNlUHJvcHMgfSBmcm9tICcuL05leHRqc0Jhc2UnO1xuXG5jb25zdCBORVhUSlNfQlVJTERfRElSID0gJy5uZXh0JztcbmNvbnN0IE5FWFRKU19TVEFUSUNfRElSID0gJ3N0YXRpYyc7XG5jb25zdCBORVhUSlNfUFVCTElDX0RJUiA9ICdwdWJsaWMnO1xuY29uc3QgTkVYVEpTX0JVSUxEX1NUQU5EQUxPTkVfRElSID0gJ3N0YW5kYWxvbmUnO1xuY29uc3QgTkVYVEpTX0JVSUxEX1NUQU5EQUxPTkVfRU5WID0gJ05FWFRfUFJJVkFURV9TVEFOREFMT05FJztcbmNvbnN0IE5FWFRKU19CVUlMRF9PVVRQVVRUUkFDRVJPT1RfRU5WID0gJ05FWFRfUFJJVkFURV9PVVRQVVRfVFJBQ0VfUk9PVCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmV4dGpzQnVpbGRQcm9wcyBleHRlbmRzIE5leHRqc0Jhc2VQcm9wcyB7fVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBidWlsdCBOZXh0SlMgYXBwbGljYXRpb24uXG4gKiBUaGlzIGNvbnN0cnVjdCBydW5zIGBucG0gYnVpbGRgIGluIHN0YW5kYWxvbmUgb3V0cHV0IG1vZGUgaW5zaWRlIHlvdXIgYG5leHRqc1BhdGhgLlxuICogVGhpcyBjb25zdHJ1Y3QgY2FuIGJlIHVzZWQgYnkgaGlnaGVyIGxldmVsIGNvbnN0cnVjdHMgb3IgdXNlZCBkaXJlY3RseS5cbiAqL1xuZXhwb3J0IGNsYXNzIE5leHRqc0J1aWxkIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgLy8gYnVpbGQgb3V0cHV0c1xuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIGRpcmVjdG9yeSB3aGVyZSB0aGUgc2VydmVyIGJ1aWxkIGFydGlmYWN0cyBhcmUgc3RvcmVkLlxuICAgKi9cbiAgcHVibGljIGJ1aWxkUGF0aDogc3RyaW5nO1xuXG4gIC8vIGJ1aWxkIG91dHB1dCBkaXJlY3Rvcmllc1xuICAvKipcbiAgICogRW50aXJlIE5leHRKUyBidWlsZCBvdXRwdXQgZGlyZWN0b3J5LlxuICAgKiBDb250YWlucyBzZXJ2ZXIgYW5kIGNsaWVudCBjb2RlIGFuZCBtYW5pZmVzdHMuXG4gICAqL1xuICBwdWJsaWMgc3RhbmRhbG9uZURpcjogc3RyaW5nO1xuICAvKipcbiAgICogTmV4dEpTIHByb2plY3QgaW5zaWRlIG9mIHN0YW5kYWxvbmUgYnVpbGQuXG4gICAqIENvbnRhaW5zIC5uZXh0IGJ1aWxkIGFuZCBzZXJ2ZXIgY29kZSBhbmQgdHJhY2VkIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIHB1YmxpYyBuZXh0U3RhbmRhbG9uZURpcjogc3RyaW5nO1xuICAvKipcbiAgICogTmV4dEpTIGJ1aWxkIGluc2lkZSBvZiBzdGFuZGFsb25lIGJ1aWxkLlxuICAgKiBDb250YWlucyBzZXJ2ZXIgY29kZSBhbmQgbWFuaWZlc3RzLlxuICAgKi9cbiAgcHVibGljIG5leHRTdGFuZGFsb25lQnVpbGREaXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFN0YXRpYyBmaWxlcyBjb250YWluaW5nIGNsaWVudC1zaWRlIGNvZGUuXG4gICAqL1xuICBwdWJsaWMgbmV4dFN0YXRpY0Rpcjogc3RyaW5nO1xuICAvKipcbiAgICogUHVibGljIHN0YXRpYyBmaWxlcy5cbiAgICogRS5nLiByb2JvdHMudHh0LCBmYXZpY29uLmljbywgZXRjLlxuICAgKi9cbiAgcHVibGljIG5leHRQdWJsaWNEaXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFJlbGF0aXZlIHBhdGggZnJvbSBwcm9qZWN0IHJvb3QgdG8gbmV4dGpzIHByb2plY3QuXG4gICAqIGUuZy4gJ3dlYicgb3IgJ3BhY2thZ2VzL3dlYicgb3IgJy4nXG4gICAqL1xuICBwdWJsaWMgbmV4dERpclJlbGF0aXZlOiBzdHJpbmc7XG5cbiAgcHVibGljIHByb3BzOiBOZXh0anNCdWlsZFByb3BzO1xuXG4gIHB1YmxpYyB0ZW1wQnVpbGREaXI6IHN0cmluZztcblxuICBwdWJsaWMgbmV4dERpcjogc3RyaW5nO1xuICBwdWJsaWMgcHJvamVjdFJvb3Q6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmV4dGpzQnVpbGRQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAvLyBzYXZlIGNvbmZpZ1xuICAgIHRoaXMudGVtcEJ1aWxkRGlyID0gcHJvcHMudGVtcEJ1aWxkRGlyXG4gICAgICA/IHBhdGgucmVzb2x2ZShwcm9wcy50ZW1wQnVpbGREaXIpXG4gICAgICA6IGZzLm1rZHRlbXBTeW5jKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ25leHRqcy1jZGstYnVpbGQtJykpO1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcblxuICAgIC8vIHZhbGlkYXRlIHBhdGhzXG4gICAgY29uc3QgYmFzZU91dHB1dERpciA9IHBhdGgucmVzb2x2ZSh0aGlzLnByb3BzLm5leHRqc1BhdGgpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhiYXNlT3V0cHV0RGlyKSkgdGhyb3cgbmV3IEVycm9yKGBOZXh0SlMgYXBwbGljYXRpb24gbm90IGZvdW5kIGF0IFwiJHtiYXNlT3V0cHV0RGlyfVwiYCk7XG5cbiAgICAvLyByb290IG9mIHByb2plY3RcbiAgICB0aGlzLnByb2plY3RSb290ID0gcHJvcHMucHJvamVjdFJvb3QgPyBwYXRoLnJlc29sdmUocHJvcHMucHJvamVjdFJvb3QpIDogcGF0aC5yZXNvbHZlKCk7XG5cbiAgICAvLyBidWlsZCBhcHBcbiAgICB0aGlzLnJ1bk5wbUJ1aWxkKCk7XG5cbiAgICAvLyBjaGVjayBmb3Igb3V0cHV0XG4gICAgY29uc3Qgc2VydmVyQnVpbGREaXIgPSBwYXRoLmpvaW4oYmFzZU91dHB1dERpciwgTkVYVEpTX0JVSUxEX0RJUik7XG4gICAgaWYgKCFwcm9wcy5pc1BsYWNlaG9sZGVyICYmICFmcy5leGlzdHNTeW5jKHNlcnZlckJ1aWxkRGlyKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc2VydmVyIGJ1aWxkIG91dHB1dCBmb3VuZCBhdCBcIiR7c2VydmVyQnVpbGREaXJ9XCJgKTtcblxuICAgIC8vIG91ciBvdXRwdXRzXG4gICAgdGhpcy5zdGFuZGFsb25lRGlyID0gdGhpcy5fZ2V0U3RhbmRhbG9uZURpcigpO1xuICAgIHRoaXMubmV4dFN0YW5kYWxvbmVEaXIgPSB0aGlzLl9nZXROZXh0U3RhbmRhbG9uZURpcigpO1xuICAgIHRoaXMubmV4dFN0YW5kYWxvbmVCdWlsZERpciA9IHRoaXMuX2dldE5leHRTdGFuZGFsb25lQnVpbGREaXIoKTtcbiAgICB0aGlzLm5leHREaXJSZWxhdGl2ZSA9IHRoaXMuX2dldE5leHREaXJSZWxhdGl2ZSgpO1xuICAgIHRoaXMubmV4dFB1YmxpY0RpciA9IHRoaXMuX2dldE5leHRQdWJsaWNEaXIoKTtcbiAgICB0aGlzLm5leHRTdGF0aWNEaXIgPSB0aGlzLl9nZXROZXh0U3RhdGljRGlyKCk7XG4gICAgdGhpcy5idWlsZFBhdGggPSB0aGlzLm5leHRTdGFuZGFsb25lQnVpbGREaXI7XG4gICAgdGhpcy5uZXh0RGlyID0gdGhpcy5fZ2V0TmV4dERpcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBydW5OcG1CdWlsZCgpIHtcbiAgICBjb25zdCB7IG5leHRqc1BhdGgsIGlzUGxhY2Vob2xkZXIsIHF1aWV0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGlzUGxhY2Vob2xkZXIpIHtcbiAgICAgIGlmICghcXVpZXQpIGNvbnNvbGUuZGVidWcoYFNraXBwaW5nIGJ1aWxkIGZvciBwbGFjZWhvbGRlciBOZXh0anNCdWlsZCBhdCAke25leHRqc1BhdGh9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdmFsaWRhdGUgc2l0ZSBwYXRoIGV4aXN0c1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhuZXh0anNQYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG5leHRqc1BhdGggJHtuZXh0anNQYXRofSAtIGRpcmVjdG9yeSBkb2VzIG5vdCBleGlzdCBhdCBcIiR7cGF0aC5yZXNvbHZlKG5leHRqc1BhdGgpfVwiYCk7XG4gICAgfVxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBzaXRlIGhhcyBhIGJ1aWxkIHNjcmlwdCBkZWZpbmVkXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHBhdGguam9pbihuZXh0anNQYXRoLCAncGFja2FnZS5qc29uJykpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHBhY2thZ2UuanNvbiBmb3VuZCBhdCBcIiR7bmV4dGpzUGF0aH1cIi5gKTtcbiAgICB9XG4gICAgY29uc3QgcGFja2FnZUpzb24gPSBmcy5yZWFkSnNvblN5bmMocGF0aC5qb2luKG5leHRqc1BhdGgsICdwYWNrYWdlLmpzb24nKSk7XG4gICAgaWYgKCFwYWNrYWdlSnNvbi5zY3JpcHRzIHx8ICFwYWNrYWdlSnNvbi5zY3JpcHRzLmJ1aWxkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIFwiYnVpbGRcIiBzY3JpcHQgZm91bmQgd2l0aGluIHBhY2thZ2UuanNvbiBpbiBcIiR7bmV4dGpzUGF0aH1cIi5gKTtcbiAgICB9XG5cbiAgICAvLyBidWlsZCBlbnZpcm9ubWVudCB2YXJzXG4gICAgY29uc3Qgb3V0cHV0VHJhY2luZ1Jvb3QgPSB0aGlzLnByb2plY3RSb290O1xuICAgIGNvbnN0IGJ1aWxkRW52ID0ge1xuICAgICAgLi4ucHJvY2Vzcy5lbnYsXG4gICAgICBbTkVYVEpTX0JVSUxEX1NUQU5EQUxPTkVfRU5WXTogJ3RydWUnLFxuICAgICAgW05FWFRKU19CVUlMRF9PVVRQVVRUUkFDRVJPT1RfRU5WXTogb3V0cHV0VHJhY2luZ1Jvb3QsXG4gICAgICAuLi5nZXRCdWlsZENtZEVudmlyb25tZW50KHRoaXMucHJvcHMuZW52aXJvbm1lbnQpLFxuICAgICAgLi4uKHRoaXMucHJvcHMubm9kZUVudiA/IHsgTk9ERV9FTlY6IHRoaXMucHJvcHMubm9kZUVudiB9IDoge30pLFxuICAgIH07XG5cbiAgICBjb25zdCBidWlsZFBhdGggPSB0aGlzLnByb3BzLmJ1aWxkUGF0aCA/PyBuZXh0anNQYXRoO1xuICAgIC8vIHJ1biBidWlsZFxuICAgIGNvbnNvbGUuZGVidWcoJ+KUnCBSdW5uaW5nIFwibnBtIGJ1aWxkXCIgaW4nLCBidWlsZFBhdGgpO1xuICAgIGNvbnN0IGJ1aWxkUmVzdWx0ID0gc3Bhd24uc3luYygnbnBtJywgWydydW4nLCAnYnVpbGQnXSwge1xuICAgICAgY3dkOiBidWlsZFBhdGgsXG4gICAgICBzdGRpbzogdGhpcy5wcm9wcy5xdWlldCA/ICdpZ25vcmUnIDogJ2luaGVyaXQnLFxuICAgICAgZW52OiBidWlsZEVudixcbiAgICB9KTtcbiAgICBpZiAoYnVpbGRSZXN1bHQuc3RhdHVzICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhcHAgXCJidWlsZFwiIHNjcmlwdCBmYWlsZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZ2V0TmV4dEJ1aWxkSWQoKSB7XG4gIC8vICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4odGhpcy5fZ2V0TmV4dFN0YW5kYWxvbmVCdWlsZERpcigpLCAnQlVJTERfSUQnKSwgJ3V0Zi04Jyk7XG4gIC8vIH1cblxuICByZWFkUHVibGljRmlsZUxpc3QoKSB7XG4gICAgY29uc3QgcHVibGljRGlyID0gdGhpcy5fZ2V0TmV4dFB1YmxpY0RpcigpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhwdWJsaWNEaXIpKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGxpc3REaXJlY3RvcnkocHVibGljRGlyKS5tYXAoKGZpbGUpID0+IHBhdGguam9pbignLycsIHBhdGgucmVsYXRpdmUocHVibGljRGlyLCBmaWxlKSkpO1xuICB9XG5cbiAgLy8gZ2V0IHRoZSBhYnNvbHV0ZSBwYXRoIHRvIHRoZSBkaXJlY3RvcnkgY29udGFpbmluZyB0aGUgbmV4dGpzIHByb2plY3RcbiAgLy8gaXQgbWF5IGJlIHRoZSBwcm9qZWN0IHJvb3Qgb3IgYSBzdWJkaXJlY3RvcnkgaW4gYSBtb25vcmVwbyBzZXR1cFxuICBwcml2YXRlIF9nZXROZXh0RGlyKCkge1xuICAgIGNvbnN0IHsgbmV4dGpzUGF0aCB9ID0gdGhpcy5wcm9wczsgLy8gcGF0aCB0byBuZXh0anMgZGlyIGluc2lkZSBwcm9qZWN0XG4gICAgY29uc3QgYWJzb2x1dGVQYXRoID0gcGF0aC5yZXNvbHZlKG5leHRqc1BhdGgpOyAvLyBlLmcuIC9ob21lL21lL215YXBwL3dlYlxuICAgIGlmICghZnMuZXhpc3RzU3luYyhhYnNvbHV0ZVBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kICR7YWJzb2x1dGVQYXRofSBkaXJlY3RvcnkuYCk7XG4gICAgfVxuICAgIHJldHVybiBhYnNvbHV0ZVBhdGg7XG4gIH1cblxuICAvLyBnZXQgcmVsYXRpdmUgcGF0aCBmcm9tIHJvb3Qgb2YgdGhlIHByb2plY3QgdG8gdGhlIG5leHRqcyBwcm9qZWN0XG4gIC8vIGUuZy4gJ3dlYicgb3IgJ3BhY2thZ2VzL3dlYidcbiAgcHJpdmF0ZSBfZ2V0TmV4dERpclJlbGF0aXZlKCkge1xuICAgIGNvbnN0IGFic05leHREaXIgPSB0aGlzLl9nZXROZXh0RGlyKCk7XG4gICAgY29uc3QgYWJzUHJvamVjdERpciA9IHRoaXMucHJvamVjdFJvb3Q7XG4gICAgcmV0dXJuIHBhdGgucmVsYXRpdmUoYWJzUHJvamVjdERpciwgYWJzTmV4dERpcik7XG4gIH1cblxuICAvLyAubmV4dFxuICBwcml2YXRlIF9nZXROZXh0QnVpbGREaXIoKSB7XG4gICAgcmV0dXJuIHBhdGguam9pbih0aGlzLl9nZXROZXh0RGlyKCksIE5FWFRKU19CVUlMRF9ESVIpO1xuICB9XG5cbiAgLy8gb3V0cHV0IG9mIG5leHRqcyBzdGFuZGFsb25lIGJ1aWxkXG4gIHByaXZhdGUgX2dldFN0YW5kYWxvbmVEaXIoKSB7XG4gICAgY29uc3QgbmV4dERpciA9IHRoaXMuX2dldE5leHRCdWlsZERpcigpO1xuICAgIGNvbnN0IHN0YW5kYWxvbmVEaXIgPSBwYXRoLmpvaW4obmV4dERpciwgTkVYVEpTX0JVSUxEX1NUQU5EQUxPTkVfRElSKTtcblxuICAgIGlmICghZnMuZXhpc3RzU3luYyhzdGFuZGFsb25lRGlyKSAmJiAhdGhpcy5wcm9wcy5pc1BsYWNlaG9sZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kICR7c3RhbmRhbG9uZURpcn0gZGlyZWN0b3J5LmApO1xuICAgIH1cbiAgICByZXR1cm4gc3RhbmRhbG9uZURpcjtcbiAgfVxuXG4gIC8vIC5uZXh0LyBkaXJlY3RvcnkgaW5zaWRlIG9mIHN0YW5kYWxvbmUgYnVpbGQgb3V0cHV0IGRpcmVjdG9yeVxuICAvLyBjb250YWlucyBtYW5pZmVzdHMgYW5kIHNlcnZlciBjb2RlXG4gIHByaXZhdGUgX2dldE5leHRTdGFuZGFsb25lQnVpbGREaXIoKSB7XG4gICAgcmV0dXJuIHBhdGguam9pbih0aGlzLl9nZXROZXh0U3RhbmRhbG9uZURpcigpLCBORVhUSlNfQlVJTERfRElSKTsgLy8gZS5nLiAvaG9tZS9tZS9teWFwcC93ZWIvLm5leHQvc3RhbmRhbG9uZS93ZWIvLm5leHRcbiAgfVxuXG4gIC8vIG5leHRqcyBwcm9qZWN0IGluc2lkZSBvZiBzdGFuZGFsb25lIGJ1aWxkXG4gIC8vIGNvbnRhaW5zIG1hbmlmZXN0cyBhbmQgc2VydmVyIGNvZGVcbiAgcHJpdmF0ZSBfZ2V0TmV4dFN0YW5kYWxvbmVEaXIoKSB7XG4gICAgY29uc3Qgc3RhbmRhbG9uZURpciA9IHRoaXMuX2dldFN0YW5kYWxvbmVEaXIoKTtcblxuICAgIC8vIGlmIHRoZSBwcm9qZWN0IGlzIGF0IC9ob21lL21lL215YXBwIGFuZCB0aGUgbmV4dGpzIHByb2plY3QgaXMgYXQgL2hvbWUvbWUvbXlhcHAvd2ViXG4gICAgLy8gdGhlIHN0YW5kYWxvbmUgYnVpbGQgb2YgdGhlIHdlYiBhcHAgd2lsbCBiZSBhdCAvaG9tZS9tZS9teWFwcC93ZWIvLm5leHQvc3RhbmRhbG9uZS93ZWJcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIGdldCB0aGUgcmVsYXRpdmUgcGF0aCBmcm9tIHRoZSBzdGFuZGFsb25lIGRpciB0byB0aGUgbmV4dGpzUGF0aFxuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IHRoaXMuX2dldE5leHREaXJSZWxhdGl2ZSgpOyAvLyBlLmcuICd3ZWJcbiAgICBjb25zdCBzdGFuZGFsb25lUHJvamVjdERpciA9IHBhdGguam9pbihzdGFuZGFsb25lRGlyLCByZWxhdGl2ZVBhdGgpOyAvLyBlLmcuIC9ob21lL21lL215YXBwL3dlYi8ubmV4dC9zdGFuZGFsb25lL3dlYlxuICAgIHJldHVybiBzdGFuZGFsb25lUHJvamVjdERpcjtcbiAgfVxuXG4gIC8vIGNvbnRhaW5zIHN0YXRpYyBmaWxlc1xuICBwcml2YXRlIF9nZXROZXh0U3RhdGljRGlyKCkge1xuICAgIHJldHVybiBwYXRoLmpvaW4odGhpcy5fZ2V0TmV4dEJ1aWxkRGlyKCksIE5FWFRKU19TVEFUSUNfRElSKTtcbiAgfVxuICBwcml2YXRlIF9nZXROZXh0UHVibGljRGlyKCkge1xuICAgIHJldHVybiBwYXRoLmpvaW4odGhpcy5fZ2V0TmV4dERpcigpLCBORVhUSlNfUFVCTElDX0RJUik7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVBcmNoaXZlQXJncyB7XG4gIHJlYWRvbmx5IGNvbXByZXNzaW9uTGV2ZWw/OiBDb21wcmVzc2lvbkxldmVsO1xuICByZWFkb25seSBkaXJlY3Rvcnk6IHN0cmluZztcbiAgcmVhZG9ubHkgemlwRmlsZU5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgemlwT3V0RGlyOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGZpbGVHbG9iPzogc3RyaW5nO1xuICByZWFkb25seSBxdWlldD86IGJvb2xlYW47XG59XG5cbi8vIHppcCB1cCBhIGRpcmVjdG9yeSBhbmQgcmV0dXJuIHBhdGggdG8gemlwIGZpbGVcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBcmNoaXZlKHtcbiAgZGlyZWN0b3J5LFxuICB6aXBGaWxlTmFtZSxcbiAgemlwT3V0RGlyLFxuICBmaWxlR2xvYiA9ICcqJyxcbiAgY29tcHJlc3Npb25MZXZlbCA9IDEsXG4gIHF1aWV0LFxufTogQ3JlYXRlQXJjaGl2ZUFyZ3MpOiBzdHJpbmcgfCBudWxsIHtcbiAgLy8gaWYgZGlyZWN0b3J5IGlzIGVtcHR5LCBjYW4gc2tpcFxuICBpZiAoIWZzLmV4aXN0c1N5bmMoZGlyZWN0b3J5KSB8fCBmcy5yZWFkZGlyU3luYyhkaXJlY3RvcnkpLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgemlwT3V0RGlyID0gcGF0aC5yZXNvbHZlKHppcE91dERpcik7XG4gIGZzLm1rZGlycFN5bmMoemlwT3V0RGlyKTtcbiAgLy8gZ2V0IG91dHB1dCBwYXRoXG4gIGNvbnN0IHppcEZpbGVQYXRoID0gcGF0aC5qb2luKHppcE91dERpciwgemlwRmlsZU5hbWUpO1xuXG4gIC8vIGRlbGV0ZSBleGlzdGluZyB6aXAgZmlsZVxuICBpZiAoZnMuZXhpc3RzU3luYyh6aXBGaWxlUGF0aCkpIHtcbiAgICBmcy51bmxpbmtTeW5jKHppcEZpbGVQYXRoKTtcbiAgfVxuXG4gIC8vIHJ1biBzY3JpcHQgdG8gY3JlYXRlIHppcGZpbGUsIHByZXNlcnZpbmcgc3ltbGlua3MgZm9yIG5vZGVfbW9kdWxlcyAoZS5nLiBwbnBtIHN0cnVjdHVyZSlcbiAgY29uc3QgcmVzdWx0ID0gc3Bhd24uc3luYyhcbiAgICAnYmFzaCcsIC8vIGdldHRpbmcgRU5PRU5UIHdoZW4gc3BlY2lmeWluZyAnbm9kZScgaGVyZSBmb3Igc29tZSByZWFzb25cbiAgICBbXG4gICAgICBxdWlldCA/ICctYycgOiAnLXhjJyxcbiAgICAgIFtgY2QgJyR7ZGlyZWN0b3J5fSdgLCBgemlwIC1yeXEke2NvbXByZXNzaW9uTGV2ZWx9ICcke3ppcEZpbGVQYXRofScgJHtmaWxlR2xvYn1gXS5qb2luKCcmJicpLFxuICAgIF0sXG4gICAgeyBzdGRpbzogJ2luaGVyaXQnIH1cbiAgKTtcbiAgaWYgKHJlc3VsdC5zdGF0dXMgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIHdhcyBhIHByb2JsZW0gZ2VuZXJhdGluZyB0aGUgcGFja2FnZSBmb3IgJHt6aXBGaWxlTmFtZX0gd2l0aCAke2RpcmVjdG9yeX06ICR7cmVzdWx0LmVycm9yfWApO1xuICB9XG4gIC8vIGNoZWNrIG91dHB1dFxuICBpZiAoIWZzLmV4aXN0c1N5bmMoemlwRmlsZVBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZXJlIHdhcyBhIHByb2JsZW0gZ2VuZXJhdGluZyB0aGUgYXJjaGl2ZSBmb3IgJHtkaXJlY3Rvcnl9OyB0aGUgYXJjaGl2ZSBpcyBtaXNzaW5nIGluICR7emlwRmlsZVBhdGh9LmBcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHppcEZpbGVQYXRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnVpbGRDbWRFbnZpcm9ubWVudChzaXRlRW52aXJvbm1lbnQ/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gIC8vIEdlbmVyYXRlIGVudmlyb25tZW50IHBsYWNlaG9sZGVycyB0byBiZSByZXBsYWNlZFxuICAvLyBpZS4gZW52aXJvbm1lbnQgPT4geyBBUElfVVJMOiBhcGkudXJsIH1cbiAgLy8gICAgIGVudmlyb25tZW50ID0+IEFQSV9VUkw9XCJ7TkVYVHshIEFQSV9VUkwgIX19XCJcbiAgLy9cbiAgY29uc3QgYnVpbGRDbWRFbnZpcm9ubWVudDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBPYmplY3QuZW50cmllcyhzaXRlRW52aXJvbm1lbnQgfHwge30pLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGJ1aWxkQ21kRW52aXJvbm1lbnRba2V5XSA9IFRva2VuLmlzVW5yZXNvbHZlZCh2YWx1ZSkgPyBtYWtlVG9rZW5QbGFjZWhvbGRlcihrZXkpIDogdmFsdWU7XG4gIH0pO1xuXG4gIHJldHVybiBidWlsZENtZEVudmlyb25tZW50O1xufVxuXG5leHBvcnQgY29uc3QgVE9LRU5fUExBQ0VIT0xERVJfQkVHSU4gPSAne05FWFR7ISAnO1xuZXhwb3J0IGNvbnN0IFRPS0VOX1BMQUNFSE9MREVSX0VORCA9ICcgIX19JztcbmV4cG9ydCBjb25zdCBtYWtlVG9rZW5QbGFjZWhvbGRlciA9ICh2YWx1ZTogc3RyaW5nKTogc3RyaW5nID0+XG4gIFRPS0VOX1BMQUNFSE9MREVSX0JFR0lOICsgdmFsdWUudG9TdHJpbmcoKSArIFRPS0VOX1BMQUNFSE9MREVSX0VORDtcbiJdfQ==
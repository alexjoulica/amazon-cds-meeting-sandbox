import { Construct } from 'constructs';
import { CompressionLevel, NextjsBaseProps } from './NextjsBase';
export interface NextjsBuildProps extends NextjsBaseProps {
}
/**
 * Represents a built NextJS application.
 * This construct runs `npm build` in standalone output mode inside your `nextjsPath`.
 * This construct can be used by higher level constructs or used directly.
 */
export declare class NextjsBuild extends Construct {
    /**
     * The path to the directory where the server build artifacts are stored.
     */
    buildPath: string;
    /**
     * Entire NextJS build output directory.
     * Contains server and client code and manifests.
     */
    standaloneDir: string;
    /**
     * NextJS project inside of standalone build.
     * Contains .next build and server code and traced dependencies.
     */
    nextStandaloneDir: string;
    /**
     * NextJS build inside of standalone build.
     * Contains server code and manifests.
     */
    nextStandaloneBuildDir: string;
    /**
     * Static files containing client-side code.
     */
    nextStaticDir: string;
    /**
     * Public static files.
     * E.g. robots.txt, favicon.ico, etc.
     */
    nextPublicDir: string;
    /**
     * Relative path from project root to nextjs project.
     * e.g. 'web' or 'packages/web' or '.'
     */
    nextDirRelative: string;
    props: NextjsBuildProps;
    tempBuildDir: string;
    nextDir: string;
    projectRoot: string;
    constructor(scope: Construct, id: string, props: NextjsBuildProps);
    private runNpmBuild;
    readPublicFileList(): string[];
    private _getNextDir;
    private _getNextDirRelative;
    private _getNextBuildDir;
    private _getStandaloneDir;
    private _getNextStandaloneBuildDir;
    private _getNextStandaloneDir;
    private _getNextStaticDir;
    private _getNextPublicDir;
}
export interface CreateArchiveArgs {
    readonly compressionLevel?: CompressionLevel;
    readonly directory: string;
    readonly zipFileName: string;
    readonly zipOutDir: string;
    readonly fileGlob?: string;
    readonly quiet?: boolean;
}
export declare function createArchive({ directory, zipFileName, zipOutDir, fileGlob, compressionLevel, quiet, }: CreateArchiveArgs): string | null;
export declare function getBuildCmdEnvironment(siteEnvironment?: {
    [key: string]: string;
}): Record<string, string>;
export declare const TOKEN_PLACEHOLDER_BEGIN = "{NEXT{! ";
export declare const TOKEN_PLACEHOLDER_END = " !}}";
export declare const makeTokenPlaceholder: (value: string) => string;

"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NextjsDistribution = exports.CONFIG_ENV_JSON_PATH = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const os = require("os");
const path = require("path");
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const acm = require("aws-cdk-lib/aws-certificatemanager");
const cloudfront = require("aws-cdk-lib/aws-cloudfront");
const aws_cloudfront_1 = require("aws-cdk-lib/aws-cloudfront");
const origins = require("aws-cdk-lib/aws-cloudfront-origins");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const route53 = require("aws-cdk-lib/aws-route53");
const route53Patterns = require("aws-cdk-lib/aws-route53-patterns");
const route53Targets = require("aws-cdk-lib/aws-route53-targets");
const constructs_1 = require("constructs");
const fs = require("fs-extra");
const BundleFunction_1 = require("./BundleFunction");
const constants_1 = require("./constants");
const NextjsBase_1 = require("./NextjsBase");
// contains server-side resolved environment vars in config bucket
exports.CONFIG_ENV_JSON_PATH = 'next-env.json';
/**
 * Create a CloudFront distribution to serve a Next.js application.
 */
class NextjsDistribution extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // get dir to store temp build files in
        this.tempBuildDir = props.tempBuildDir
            ? path.resolve(path.join(props.tempBuildDir, `nextjs-cdk-build-${this.node.id}-${this.node.addr.substring(0, 4)}`))
            : fs.mkdtempSync(path.join(os.tmpdir(), 'nextjs-cdk-build-'));
        // save props
        this.props = { ...props, tempBuildDir: this.tempBuildDir };
        // Create Custom Domain
        this.validateCustomDomainSettings();
        this.hostedZone = this.lookupHostedZone();
        this.certificate = this.createCertificate();
        // Create CloudFront
        this.distribution = this.props.isPlaceholder
            ? this.createCloudFrontDistributionForStub()
            : this.createCloudFrontDistribution();
        // Connect Custom Domain to CloudFront Distribution
        this.createRoute53Records();
    }
    /**
     * The CloudFront URL of the website.
     */
    get url() {
        return `https://${this.distribution.distributionDomainName}`;
    }
    /**
     * If the custom domain is enabled, this is the URL of the website with the
     * custom domain.
     */
    get customDomainUrl() {
        const { customDomain } = this.props;
        if (!customDomain) {
            return;
        }
        if (typeof customDomain === 'string') {
            return `https://${customDomain}`;
        }
        else {
            return `https://${customDomain.domainName}`;
        }
    }
    /**
     * The ID of the internally created CloudFront Distribution.
     */
    get distributionId() {
        return this.distribution.distributionId;
    }
    /**
     * The domain name of the internally created CloudFront Distribution.
     */
    get distributionDomain() {
        return this.distribution.distributionDomainName;
    }
    /////////////////////
    // CloudFront Distribution
    /////////////////////
    createCloudFrontDistribution() {
        const { cdk: cdkProps, cachePolicies, lambdaOriginRequestPolicy: lambdaOriginRequestPolicyOverride } = this.props;
        const cfDistributionProps = cdkProps?.distribution;
        // build domainNames
        const domainNames = this.buildDistributionDomainNames();
        // S3 origin
        const s3Origin = new origins.S3Origin(this.props.staticAssetsBucket);
        const viewerProtocolPolicy = cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS;
        // handle placeholder
        if (this.props.isPlaceholder) {
            return new cloudfront.Distribution(this, 'Distribution', {
                defaultRootObject: 'index.html',
                errorResponses: NextjsBase_1.buildErrorResponsesForRedirectToIndex('index.html'),
                domainNames,
                certificate: this.certificate,
                defaultBehavior: {
                    origin: s3Origin,
                    viewerProtocolPolicy,
                },
            });
        }
        // cache policies
        const staticCachePolicy = cachePolicies?.staticCachePolicy ?? this.createCloudFrontStaticCachePolicy();
        const imageCachePolicy = cachePolicies?.imageCachePolicy ?? this.createCloudFrontImageCachePolicy();
        // origin request policies
        const lambdaOriginRequestPolicy = lambdaOriginRequestPolicyOverride ?? this.createLambdaOriginRequestPolicy();
        // main server function origin (lambda URL HTTP origin)
        const fnUrl = this.props.serverFunction.addFunctionUrl({
            authType: lambda.FunctionUrlAuthType.NONE,
        });
        const serverFunctionOrigin = new origins.HttpOrigin(aws_cdk_lib_1.Fn.parseDomainName(fnUrl.url), {
            customHeaders: {
                // provide config to edge lambda function
                'x-origin-url': fnUrl.url,
            },
        });
        // Image Optimization
        const imageOptFnUrl = this.props.imageOptFunction.addFunctionUrl({
            authType: lambda.FunctionUrlAuthType.NONE,
        });
        const imageOptFunctionOrigin = new origins.HttpOrigin(aws_cdk_lib_1.Fn.parseDomainName(imageOptFnUrl.url));
        const imageOptORP = new cloudfront.OriginRequestPolicy(this, 'ImageOptPolicy', {
            queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('q', 'w', 'url'),
            headerBehavior: cloudfront.OriginRequestHeaderBehavior.allowList('accept'),
            cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),
        });
        // lambda behavior edge function
        const lambdaOriginRequestEdgeFn = this.buildLambdaOriginRequestEdgeFunction();
        const lambdaOriginRequestEdgeFnVersion = lambda.Version.fromVersionArn(this, 'Version', lambdaOriginRequestEdgeFn.currentVersion.functionArn);
        const lambdaOriginEdgeFns = [
            {
                eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,
                functionVersion: lambdaOriginRequestEdgeFnVersion,
                includeBody: false,
            },
        ];
        // default handler for requests that don't match any other path:
        //   - try lambda handler first (/some-page, etc...)
        //   - if 403, fall back to S3
        //   - if 404, fall back to lambda handler
        const fallbackOriginGroup = new origins.OriginGroup({
            primaryOrigin: serverFunctionOrigin,
            fallbackOrigin: s3Origin,
            fallbackStatusCodes: [403, 404],
        });
        const lambdaCachePolicy = cachePolicies?.lambdaCachePolicy ?? this.createCloudFrontLambdaCachePolicy();
        // requests for static objects
        const defaultStaticMaxAge = cachePolicies?.staticClientMaxAgeDefault?.toSeconds() || constants_1.DEFAULT_STATIC_MAX_AGE;
        const staticResponseHeadersPolicy = new aws_cloudfront_1.ResponseHeadersPolicy(this, 'StaticResponseHeadersPolicy', {
            // add default header for static assets
            customHeadersBehavior: {
                customHeaders: [
                    {
                        header: 'cache-control',
                        override: false,
                        // by default tell browser to cache static files for this long
                        // this is separate from the origin cache policy
                        value: `public,max-age=${defaultStaticMaxAge},immutable`,
                    },
                ],
            },
        });
        const staticBehavior = {
            viewerProtocolPolicy,
            origin: s3Origin,
            allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
            cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,
            compress: true,
            cachePolicy: staticCachePolicy,
            responseHeadersPolicy: staticResponseHeadersPolicy,
        };
        // requests going to lambda (api, etc)
        const lambdaBehavior = {
            viewerProtocolPolicy,
            origin: serverFunctionOrigin,
            allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,
            // cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS, // this should be configurable
            originRequestPolicy: lambdaOriginRequestPolicy,
            compress: true,
            cachePolicy: cloudfront.CachePolicy.CACHING_DISABLED,
            edgeLambdas: lambdaOriginEdgeFns,
        };
        // requests to fallback origin group (default behavior)
        // used for S3 and lambda. would prefer to forward all headers to lambda but need to strip out host
        // TODO: try to do this with headers whitelist or edge lambda
        const fallbackOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'FallbackOriginRequestPolicy', {
            cookieBehavior: cloudfront.OriginRequestCookieBehavior.all(),
            queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.all(),
            headerBehavior: cloudfront.OriginRequestHeaderBehavior.all(),
            comment: 'Nextjs Fallback Origin Request Policy',
        });
        // if we don't have a static file called index.html then we should
        // redirect to the lambda handler
        const hasIndexHtml = this.props.nextBuild.readPublicFileList().includes('index.html');
        return new cloudfront.Distribution(this, 'Distribution', {
            // defaultRootObject: "index.html",
            defaultRootObject: '',
            // Override props.
            ...cfDistributionProps,
            // these values can NOT be overwritten by cfDistributionProps
            domainNames,
            certificate: this.certificate,
            defaultBehavior: {
                origin: fallbackOriginGroup,
                viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
                compress: true,
                // what goes here? static or lambda?
                cachePolicy: lambdaCachePolicy,
                originRequestPolicy: fallbackOriginRequestPolicy,
                edgeLambdas: lambdaOriginEdgeFns,
            },
            additionalBehaviors: {
                // is index.html static or dynamic?
                ...(hasIndexHtml ? {} : { '/': lambdaBehavior }),
                // known dynamic routes
                'api/*': lambdaBehavior,
                '_next/data/*': lambdaBehavior,
                // dynamic images go to lambda
                '_next/image*': {
                    viewerProtocolPolicy,
                    origin: imageOptFunctionOrigin,
                    allowedMethods: cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
                    cachedMethods: cloudfront.CachedMethods.CACHE_GET_HEAD_OPTIONS,
                    compress: true,
                    cachePolicy: imageCachePolicy,
                    originRequestPolicy: imageOptORP,
                },
                // known static routes
                // it would be nice to create routes for all the static files we know of
                // but we run into the limit of CacheBehaviors per distribution
                '_next/*': staticBehavior,
            },
        });
    }
    createCloudFrontStaticCachePolicy() {
        return new cloudfront.CachePolicy(this, 'StaticsCache', NextjsDistribution.staticCachePolicyProps);
    }
    createCloudFrontImageCachePolicy() {
        return new cloudfront.CachePolicy(this, 'ImageCache', NextjsDistribution.imageCachePolicyProps);
    }
    createLambdaOriginRequestPolicy() {
        return new cloudfront.OriginRequestPolicy(this, 'LambdaOriginPolicy', NextjsDistribution.lambdaOriginRequestPolicyProps);
    }
    createCloudFrontLambdaCachePolicy() {
        return new cloudfront.CachePolicy(this, 'LambdaCache', NextjsDistribution.lambdaCachePolicyProps);
    }
    createCloudFrontDistributionForStub() {
        return new cloudfront.Distribution(this, 'Distribution', {
            defaultRootObject: 'index.html',
            errorResponses: NextjsBase_1.buildErrorResponsesForRedirectToIndex('index.html'),
            domainNames: this.buildDistributionDomainNames(),
            certificate: this.certificate,
            defaultBehavior: {
                origin: new origins.S3Origin(this.props.staticAssetsBucket),
                viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            },
            ...this.props.cdk?.distribution,
        });
    }
    buildDistributionDomainNames() {
        const { customDomain } = this.props;
        const domainNames = [];
        if (!customDomain) {
            // no domain
        }
        else if (typeof customDomain === 'string') {
            domainNames.push(customDomain);
        }
        else {
            domainNames.push(customDomain.domainName);
        }
        return domainNames;
    }
    /**
     * Create an edge function to handle requests to the lambda server handler origin.
     * It overrides the host header in the request to be the lambda URL's host.
     * It's needed because we forward all headers to the origin, but the origin is itself an
     *  HTTP server so it needs the host header to be the address of the lambda and not
     *  the distribution.
     *
     */
    buildLambdaOriginRequestEdgeFunction() {
        const app = aws_cdk_lib_1.App.of(this);
        // bundle the edge function
        const inputPath = path.join(__dirname, '..', 'assets', 'lambda@edge', 'LambdaOriginRequest');
        const outputPath = path.join(this.tempBuildDir, 'lambda@edge', 'LambdaOriginRequest.js');
        BundleFunction_1.bundleFunction({
            inputPath,
            outputPath,
            bundleOptions: {
                bundle: true,
                external: ['aws-sdk', 'url'],
                minify: true,
                target: 'node16',
                platform: 'node',
            },
        });
        const fn = new cloudfront.experimental.EdgeFunction(this, 'DefaultOriginRequestEdgeFn', {
            runtime: constants_1.LAMBDA_RUNTIME,
            // role,
            handler: 'LambdaOriginRequest.handler',
            code: lambda.Code.fromAsset(path_1.dirname(outputPath)),
            currentVersionOptions: {
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                retryAttempts: 1,
            },
            stackId: `Nextjs-${this.props.stageName || app.stageName || 'default'}-EdgeFunctions-` + this.node.addr.substring(0, 5),
        });
        fn.currentVersion.grantInvoke(new aws_iam_1.ServicePrincipal('edgelambda.amazonaws.com'));
        fn.currentVersion.grantInvoke(new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'));
        return fn;
    }
    /////////////////////
    // Custom Domain
    /////////////////////
    validateCustomDomainSettings() {
        const { customDomain } = this.props;
        if (!customDomain) {
            return;
        }
        if (typeof customDomain === 'string') {
            return;
        }
        if (customDomain.isExternalDomain === true) {
            if (!customDomain.certificate) {
                throw new Error('A valid certificate is required when "isExternalDomain" is set to "true".');
            }
            if (customDomain.domainAlias) {
                throw new Error('Domain alias is only supported for domains hosted on Amazon Route 53. Do not set the "customDomain.domainAlias" when "isExternalDomain" is enabled.');
            }
            if (customDomain.hostedZone) {
                throw new Error('Hosted zones can only be configured for domains hosted on Amazon Route 53. Do not set the "customDomain.hostedZone" when "isExternalDomain" is enabled.');
            }
        }
    }
    lookupHostedZone() {
        const { customDomain } = this.props;
        // Skip if customDomain is not configured
        if (!customDomain) {
            return;
        }
        let hostedZone;
        if (typeof customDomain === 'string') {
            hostedZone = route53.HostedZone.fromLookup(this, 'HostedZone', {
                domainName: customDomain,
            });
        }
        else if (typeof customDomain.hostedZone === 'string') {
            hostedZone = route53.HostedZone.fromLookup(this, 'HostedZone', {
                domainName: customDomain.hostedZone,
            });
        }
        else if (customDomain.hostedZone) {
            hostedZone = customDomain.hostedZone;
        }
        else if (typeof customDomain.domainName === 'string') {
            // Skip if domain is not a Route53 domain
            if (customDomain.isExternalDomain === true) {
                return;
            }
            hostedZone = route53.HostedZone.fromLookup(this, 'HostedZone', {
                domainName: customDomain.domainName,
            });
        }
        else {
            hostedZone = customDomain.hostedZone;
        }
        return hostedZone;
    }
    createCertificate() {
        const { customDomain } = this.props;
        if (!customDomain) {
            return;
        }
        let acmCertificate;
        // HostedZone is set for Route 53 domains
        if (this.hostedZone) {
            if (typeof customDomain === 'string') {
                acmCertificate = new acm.DnsValidatedCertificate(this, 'Certificate', {
                    domainName: customDomain,
                    hostedZone: this.hostedZone,
                    region: 'us-east-1',
                });
            }
            else if (customDomain.certificate) {
                acmCertificate = customDomain.certificate;
            }
            else {
                acmCertificate = new acm.DnsValidatedCertificate(this, 'Certificate', {
                    domainName: customDomain.domainName,
                    hostedZone: this.hostedZone,
                    region: 'us-east-1',
                });
            }
        }
        // HostedZone is NOT set for non-Route 53 domains
        else {
            if (typeof customDomain !== 'string') {
                acmCertificate = customDomain.certificate;
            }
        }
        return acmCertificate;
    }
    createRoute53Records() {
        const { customDomain } = this.props;
        if (!customDomain || !this.hostedZone) {
            return;
        }
        let recordName;
        let domainAlias;
        if (typeof customDomain === 'string') {
            recordName = customDomain;
        }
        else {
            recordName = customDomain.domainName;
            domainAlias = customDomain.domainAlias;
        }
        // Create DNS record
        const recordProps = {
            recordName,
            zone: this.hostedZone,
            target: route53.RecordTarget.fromAlias(new route53Targets.CloudFrontTarget(this.distribution)),
        };
        new route53.ARecord(this, 'AliasRecord', recordProps);
        new route53.AaaaRecord(this, 'AliasRecordAAAA', recordProps);
        // Create Alias redirect record
        if (domainAlias) {
            new route53Patterns.HttpsRedirect(this, 'Redirect', {
                zone: this.hostedZone,
                recordNames: [domainAlias],
                targetDomain: recordName,
            });
        }
    }
}
exports.NextjsDistribution = NextjsDistribution;
_a = JSII_RTTI_SYMBOL_1;
NextjsDistribution[_a] = { fqn: "cdk-nextjs-standalone.NextjsDistribution", version: "2.0.3" };
/**
 * The default CloudFront cache policy properties for static pages.
 */
NextjsDistribution.staticCachePolicyProps = {
    queryStringBehavior: cloudfront.CacheQueryStringBehavior.none(),
    headerBehavior: cloudfront.CacheHeaderBehavior.none(),
    cookieBehavior: cloudfront.CacheCookieBehavior.none(),
    defaultTtl: aws_cdk_lib_1.Duration.days(30),
    maxTtl: aws_cdk_lib_1.Duration.days(60),
    minTtl: aws_cdk_lib_1.Duration.days(30),
    enableAcceptEncodingBrotli: true,
    enableAcceptEncodingGzip: true,
    comment: 'Nextjs Static Default Cache Policy',
};
/**
 * The default CloudFront cache policy properties for images.
 */
NextjsDistribution.imageCachePolicyProps = {
    queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),
    headerBehavior: cloudfront.CacheHeaderBehavior.allowList('Accept'),
    cookieBehavior: cloudfront.CacheCookieBehavior.none(),
    defaultTtl: aws_cdk_lib_1.Duration.days(1),
    maxTtl: aws_cdk_lib_1.Duration.days(365),
    minTtl: aws_cdk_lib_1.Duration.days(0),
    enableAcceptEncodingBrotli: true,
    enableAcceptEncodingGzip: true,
    comment: 'Nextjs Image Default Cache Policy',
};
/**
 * The default CloudFront cache policy properties for the Lambda server handler.
 */
NextjsDistribution.lambdaCachePolicyProps = {
    queryStringBehavior: cloudfront.CacheQueryStringBehavior.all(),
    headerBehavior: cloudfront.CacheHeaderBehavior.none(),
    cookieBehavior: cloudfront.CacheCookieBehavior.all(),
    defaultTtl: aws_cdk_lib_1.Duration.seconds(0),
    maxTtl: aws_cdk_lib_1.Duration.days(365),
    minTtl: aws_cdk_lib_1.Duration.seconds(0),
    enableAcceptEncodingBrotli: true,
    enableAcceptEncodingGzip: true,
    comment: 'Nextjs Lambda Default Cache Policy',
};
/**
 * The default CloudFront lambda origin request policy.
 */
NextjsDistribution.lambdaOriginRequestPolicyProps = {
    cookieBehavior: cloudfront.OriginRequestCookieBehavior.all(),
    queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.all(),
    headerBehavior: cloudfront.OriginRequestHeaderBehavior.all(),
    comment: 'Nextjs Lambda Origin Request Policy',
};
//# sourceMappingURL=data:application/json;base64,